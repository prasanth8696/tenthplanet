#!/usr/bin/python3

import os
import sys
import json
from pprint import pprint

help = '''
  -k keyword  
  -p path
  -c clear method
  -f find method
  -e extension

'''
def insertStr(positions:list,str:str) -> str :
  liststr = [char for char in str  ]
 
  liststr.insert(positions[0],'\033[92m')
  liststr.insert(positions[1]+1,'\033[0m')
  return ''.join(liststr)

def deleteFiles(extension) :
   count = 0
   for file in os.listdir() :
     ext = os.path.splitext(file)[1]
     if ext == extension :
        os.remove(file)
        count += 1


   print(f'{count} {extension} files deleted sucessfully in {os.getcwd()}')

files_dict = {}
def findFiles(keyword,curDir) :
   for dirpath,dirname,filenames in os.walk(curDir):
      for file in filenames :
          if (file.find(keyword) >= 0) :
             #for keyword color formatting
              index = file.find(keyword)
              formatted_file = insertStr([index,index+len(keyword)],file)
              files_dict[formatted_file] = os.path.join(dirpath,file)

              with open('result.json','w') as fi :
                   json.dump(files_dict,fi,indent=2)
#   return json.dumps(files_dict, indent=2)
   return files_dict

def clearFile() :
  try :
    args = list(sys.argv)

    #find user path
    if ( '-p' in args) :
       index = args.index('-p')
       curPath = args[index+1]
    else :
       curPath = os.path.join(os.environ.get('HOME'),'Downloads')

    if (os.path.exists(curPath)) :
       os.chdir(curPath)
    else :
       raise FileNotFoundError

    #find user extension

    if ('-e' in args) :
       index = args.index('-e')
       extension = f'.{args[index + 1]}'
    else :
       extension = '.pdf'

    deleteFiles(extension)

  except FileNotFoundError :
    print('Invalid path...')

  except :
    print("something went wrong")
    exit()

def findFile() :
  try :
    args = list(sys.argv)

    #find user path
    if ( '-p' in args) :
       index = args.index('-p')
       curPath = args[index+1]
    else :
       curPath = os.environ.get('HOME')

    if not(os.path.exists(curPath)) :
       raise FileNotFoundError

    if ('-k' in args) :
       index = args.index('-k')
       keyword = args[index + 1]
    else :
      raise ValueError

    List = findFiles(keyword,curPath)
    if not List :
      print('String Not Found...')
      exit()
    print('filename','        ','filePath')
    for file,path in List.items() :
      print(file,' ==>>> ',path)

  except FileNotFoundError :
    print('Invalid path...') 
 
  except ValueError :
    print('please provide keyword to search...')

  except Exception as e :
    print('something went wrong...')


def main() :
  param_list = list(sys.argv)

  if ('-c' in param_list) :
     clearFile()
  elif('-f' in param_list) :
     findFile()
  else :
     print('operation not found use -f for find or -c clear the files')
     print(help)


if __name__ == '__main__' :
   main()
