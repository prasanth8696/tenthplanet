:reference-link :
   >>>> https://odoo-new-api-guide-line.readthedocs.io/en/latest/environment.html#common-actions
   >>>> https://www.cybrosys.com/blog/orm-methods-in-odoo-15


self.env :
  it is a environment thats provided encapsulation around 
                                1) "db_cursor"
                                2) "current_user"
                                3) "recordSet"
                                4) "cache"
                                5) "all_models"
                                6) "context"



#self ==>>> it will contain current recordset
  ex :
    self.name ==>> it will give current property name( in our real estate module)

#self.env ==>>> it will give the env :



"domain" :
  it will contain 3 values "key","operator","value" in side the 'tuble format' one domain conatain multiple 'tuple' format
  ex :
  syntax :
    domain = [('key','operator','value'), (...)]
    ex : [('status','=','offer_accepted'),('expected_price','>=','10000')] 


@methods :
 
1) search :
   it will give "recordset" based on your domain(condition)   return_type = "Tuble-record-set"
   ex ;
     # self.search([]) =>> it will give all records in current record like in "mongo db"
     # self.env["estate.property.fifteen"].search(['status','=','sold']) =>> it will give only recordset of sold properties only 


     NOTE:self.env.['model_name'] >it .will .give .only .object .of that model class only...


2) search_read() :
   it will search and give specified  columns only...  return_type == "list_of_dict"
   :syntax 
       self.env["model_name"].search_read(domain,[needed_fields])

       ex:
          self.env["estate.property.fifteen"].search_read([('status','=','sold'),('expected_price','>=',5000)],['name','selling_price','expected_price'])


3) search_count() :
   it will give the count of matched domain(condition)

   :syntax :
        self.search_count([domain])

       ex:
          self.search_count([('status','=','canceled')]) ==> it will give count canceled records (if didnt spcify any model self will take the current model)



4) browse() :
    :syntax :
      Model.browse([ids])  ==> it will take list of ids... return type :recordset
    ex:
      self.browse([1,2,3]) ==> return 3 recordset 
